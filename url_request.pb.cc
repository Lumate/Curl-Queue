// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: url_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "url_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* URLRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  URLRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_url_5frequest_2eproto() {
  protobuf_AddDesc_url_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "url_request.proto");
  GOOGLE_CHECK(file != NULL);
  URLRequest_descriptor_ = file->message_type(0);
  static const int URLRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, request_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, request_headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, request_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, response_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, response_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, response_headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, response_body_),
  };
  URLRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      URLRequest_descriptor_,
      URLRequest::default_instance_,
      URLRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(URLRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_url_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    URLRequest_descriptor_, &URLRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_url_5frequest_2eproto() {
  delete URLRequest::default_instance_;
  delete URLRequest_reflection_;
}

void protobuf_AddDesc_url_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021url_request.proto\"\303\001\n\nURLRequest\022\023\n\013re"
    "quest_url\030\001 \001(\t\022\027\n\017request_headers\030\002 \003(\t"
    "\022\024\n\014request_body\030\003 \001(\t\022\020\n\010response\030\004 \001(\010"
    "\022\025\n\rresponse_time\030\005 \001(\t\022\027\n\017response_stat"
    "us\030\006 \001(\t\022\030\n\020response_headers\030\007 \003(\t\022\025\n\rre"
    "sponse_body\030\010 \001(\t", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "url_request.proto", &protobuf_RegisterTypes);
  URLRequest::default_instance_ = new URLRequest();
  URLRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_url_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_url_5frequest_2eproto {
  StaticDescriptorInitializer_url_5frequest_2eproto() {
    protobuf_AddDesc_url_5frequest_2eproto();
  }
} static_descriptor_initializer_url_5frequest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int URLRequest::kRequestUrlFieldNumber;
const int URLRequest::kRequestHeadersFieldNumber;
const int URLRequest::kRequestBodyFieldNumber;
const int URLRequest::kResponseFieldNumber;
const int URLRequest::kResponseTimeFieldNumber;
const int URLRequest::kResponseStatusFieldNumber;
const int URLRequest::kResponseHeadersFieldNumber;
const int URLRequest::kResponseBodyFieldNumber;
#endif  // !_MSC_VER

URLRequest::URLRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void URLRequest::InitAsDefaultInstance() {
}

URLRequest::URLRequest(const URLRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void URLRequest::SharedCtor() {
  _cached_size_ = 0;
  request_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_ = false;
  response_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

URLRequest::~URLRequest() {
  SharedDtor();
}

void URLRequest::SharedDtor() {
  if (request_url_ != &::google::protobuf::internal::kEmptyString) {
    delete request_url_;
  }
  if (request_body_ != &::google::protobuf::internal::kEmptyString) {
    delete request_body_;
  }
  if (response_time_ != &::google::protobuf::internal::kEmptyString) {
    delete response_time_;
  }
  if (response_status_ != &::google::protobuf::internal::kEmptyString) {
    delete response_status_;
  }
  if (response_body_ != &::google::protobuf::internal::kEmptyString) {
    delete response_body_;
  }
  if (this != default_instance_) {
  }
}

void URLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* URLRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return URLRequest_descriptor_;
}

const URLRequest& URLRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_url_5frequest_2eproto();
  return *default_instance_;
}

URLRequest* URLRequest::default_instance_ = NULL;

URLRequest* URLRequest::New() const {
  return new URLRequest;
}

void URLRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_url()) {
      if (request_url_ != &::google::protobuf::internal::kEmptyString) {
        request_url_->clear();
      }
    }
    if (has_request_body()) {
      if (request_body_ != &::google::protobuf::internal::kEmptyString) {
        request_body_->clear();
      }
    }
    response_ = false;
    if (has_response_time()) {
      if (response_time_ != &::google::protobuf::internal::kEmptyString) {
        response_time_->clear();
      }
    }
    if (has_response_status()) {
      if (response_status_ != &::google::protobuf::internal::kEmptyString) {
        response_status_->clear();
      }
    }
    if (has_response_body()) {
      if (response_body_ != &::google::protobuf::internal::kEmptyString) {
        response_body_->clear();
      }
    }
  }
  request_headers_.Clear();
  response_headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool URLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_url().data(), this->request_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_headers;
        break;
      }

      // repeated string request_headers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_headers(this->request_headers_size() - 1).data(),
            this->request_headers(this->request_headers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_headers;
        if (input->ExpectTag(26)) goto parse_request_body;
        break;
      }

      // optional string request_body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_body().data(), this->request_body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_response;
        break;
      }

      // optional bool response = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_response_time;
        break;
      }

      // optional string response_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_time().data(), this->response_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_response_status;
        break;
      }

      // optional string response_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_status().data(), this->response_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_response_headers;
        break;
      }

      // repeated string response_headers = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_response_headers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_headers(this->response_headers_size() - 1).data(),
            this->response_headers(this->response_headers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_response_headers;
        if (input->ExpectTag(66)) goto parse_response_body;
        break;
      }

      // optional string response_body = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_body().data(), this->response_body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void URLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_url = 1;
  if (has_request_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_url().data(), this->request_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_url(), output);
  }

  // repeated string request_headers = 2;
  for (int i = 0; i < this->request_headers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->request_headers(i).data(), this->request_headers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_headers(i), output);
  }

  // optional string request_body = 3;
  if (has_request_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_body().data(), this->request_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->request_body(), output);
  }

  // optional bool response = 4;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->response(), output);
  }

  // optional string response_time = 5;
  if (has_response_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_time().data(), this->response_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->response_time(), output);
  }

  // optional string response_status = 6;
  if (has_response_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_status().data(), this->response_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->response_status(), output);
  }

  // repeated string response_headers = 7;
  for (int i = 0; i < this->response_headers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->response_headers(i).data(), this->response_headers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->response_headers(i), output);
  }

  // optional string response_body = 8;
  if (has_response_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_body().data(), this->response_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->response_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* URLRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_url = 1;
  if (has_request_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_url().data(), this->request_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_url(), target);
  }

  // repeated string request_headers = 2;
  for (int i = 0; i < this->request_headers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_headers(i).data(), this->request_headers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->request_headers(i), target);
  }

  // optional string request_body = 3;
  if (has_request_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_body().data(), this->request_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_body(), target);
  }

  // optional bool response = 4;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->response(), target);
  }

  // optional string response_time = 5;
  if (has_response_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_time().data(), this->response_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->response_time(), target);
  }

  // optional string response_status = 6;
  if (has_response_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_status().data(), this->response_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->response_status(), target);
  }

  // repeated string response_headers = 7;
  for (int i = 0; i < this->response_headers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_headers(i).data(), this->response_headers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->response_headers(i), target);
  }

  // optional string response_body = 8;
  if (has_response_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_body().data(), this->response_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->response_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int URLRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_url = 1;
    if (has_request_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_url());
    }

    // optional string request_body = 3;
    if (has_request_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_body());
    }

    // optional bool response = 4;
    if (has_response()) {
      total_size += 1 + 1;
    }

    // optional string response_time = 5;
    if (has_response_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_time());
    }

    // optional string response_status = 6;
    if (has_response_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_status());
    }

    // optional string response_body = 8;
    if (has_response_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_body());
    }

  }
  // repeated string request_headers = 2;
  total_size += 1 * this->request_headers_size();
  for (int i = 0; i < this->request_headers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers(i));
  }

  // repeated string response_headers = 7;
  total_size += 1 * this->response_headers_size();
  for (int i = 0; i < this->response_headers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->response_headers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void URLRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const URLRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const URLRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void URLRequest::MergeFrom(const URLRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  request_headers_.MergeFrom(from.request_headers_);
  response_headers_.MergeFrom(from.response_headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_url()) {
      set_request_url(from.request_url());
    }
    if (from.has_request_body()) {
      set_request_body(from.request_body());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_response_time()) {
      set_response_time(from.response_time());
    }
    if (from.has_response_status()) {
      set_response_status(from.response_status());
    }
    if (from.has_response_body()) {
      set_response_body(from.response_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void URLRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URLRequest::CopyFrom(const URLRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URLRequest::IsInitialized() const {

  return true;
}

void URLRequest::Swap(URLRequest* other) {
  if (other != this) {
    std::swap(request_url_, other->request_url_);
    request_headers_.Swap(&other->request_headers_);
    std::swap(request_body_, other->request_body_);
    std::swap(response_, other->response_);
    std::swap(response_time_, other->response_time_);
    std::swap(response_status_, other->response_status_);
    response_headers_.Swap(&other->response_headers_);
    std::swap(response_body_, other->response_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata URLRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = URLRequest_descriptor_;
  metadata.reflection = URLRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
