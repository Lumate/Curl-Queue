// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: url_request.proto

#ifndef PROTOBUF_url_5frequest_2eproto__INCLUDED
#define PROTOBUF_url_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_url_5frequest_2eproto();
void protobuf_AssignDesc_url_5frequest_2eproto();
void protobuf_ShutdownFile_url_5frequest_2eproto();

class URLRequest;

// ===================================================================

class URLRequest : public ::google::protobuf::Message {
 public:
  URLRequest();
  virtual ~URLRequest();

  URLRequest(const URLRequest& from);

  inline URLRequest& operator=(const URLRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const URLRequest& default_instance();

  void Swap(URLRequest* other);

  // implements Message ----------------------------------------------

  URLRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const URLRequest& from);
  void MergeFrom(const URLRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_url = 1;
  inline bool has_request_url() const;
  inline void clear_request_url();
  static const int kRequestUrlFieldNumber = 1;
  inline const ::std::string& request_url() const;
  inline void set_request_url(const ::std::string& value);
  inline void set_request_url(const char* value);
  inline void set_request_url(const char* value, size_t size);
  inline ::std::string* mutable_request_url();
  inline ::std::string* release_request_url();
  inline void set_allocated_request_url(::std::string* request_url);

  // repeated string request_headers = 2;
  inline int request_headers_size() const;
  inline void clear_request_headers();
  static const int kRequestHeadersFieldNumber = 2;
  inline const ::std::string& request_headers(int index) const;
  inline ::std::string* mutable_request_headers(int index);
  inline void set_request_headers(int index, const ::std::string& value);
  inline void set_request_headers(int index, const char* value);
  inline void set_request_headers(int index, const char* value, size_t size);
  inline ::std::string* add_request_headers();
  inline void add_request_headers(const ::std::string& value);
  inline void add_request_headers(const char* value);
  inline void add_request_headers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& request_headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_request_headers();

  // optional string request_body = 3;
  inline bool has_request_body() const;
  inline void clear_request_body();
  static const int kRequestBodyFieldNumber = 3;
  inline const ::std::string& request_body() const;
  inline void set_request_body(const ::std::string& value);
  inline void set_request_body(const char* value);
  inline void set_request_body(const char* value, size_t size);
  inline ::std::string* mutable_request_body();
  inline ::std::string* release_request_body();
  inline void set_allocated_request_body(::std::string* request_body);

  // optional bool response = 4;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 4;
  inline bool response() const;
  inline void set_response(bool value);

  // optional string response_time = 5;
  inline bool has_response_time() const;
  inline void clear_response_time();
  static const int kResponseTimeFieldNumber = 5;
  inline const ::std::string& response_time() const;
  inline void set_response_time(const ::std::string& value);
  inline void set_response_time(const char* value);
  inline void set_response_time(const char* value, size_t size);
  inline ::std::string* mutable_response_time();
  inline ::std::string* release_response_time();
  inline void set_allocated_response_time(::std::string* response_time);

  // optional string response_status = 6;
  inline bool has_response_status() const;
  inline void clear_response_status();
  static const int kResponseStatusFieldNumber = 6;
  inline const ::std::string& response_status() const;
  inline void set_response_status(const ::std::string& value);
  inline void set_response_status(const char* value);
  inline void set_response_status(const char* value, size_t size);
  inline ::std::string* mutable_response_status();
  inline ::std::string* release_response_status();
  inline void set_allocated_response_status(::std::string* response_status);

  // repeated string response_headers = 7;
  inline int response_headers_size() const;
  inline void clear_response_headers();
  static const int kResponseHeadersFieldNumber = 7;
  inline const ::std::string& response_headers(int index) const;
  inline ::std::string* mutable_response_headers(int index);
  inline void set_response_headers(int index, const ::std::string& value);
  inline void set_response_headers(int index, const char* value);
  inline void set_response_headers(int index, const char* value, size_t size);
  inline ::std::string* add_response_headers();
  inline void add_response_headers(const ::std::string& value);
  inline void add_response_headers(const char* value);
  inline void add_response_headers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& response_headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_response_headers();

  // optional string response_body = 8;
  inline bool has_response_body() const;
  inline void clear_response_body();
  static const int kResponseBodyFieldNumber = 8;
  inline const ::std::string& response_body() const;
  inline void set_response_body(const ::std::string& value);
  inline void set_response_body(const char* value);
  inline void set_response_body(const char* value, size_t size);
  inline ::std::string* mutable_response_body();
  inline ::std::string* release_response_body();
  inline void set_allocated_response_body(::std::string* response_body);

  // @@protoc_insertion_point(class_scope:URLRequest)
 private:
  inline void set_has_request_url();
  inline void clear_has_request_url();
  inline void set_has_request_body();
  inline void clear_has_request_body();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_response_time();
  inline void clear_has_response_time();
  inline void set_has_response_status();
  inline void clear_has_response_status();
  inline void set_has_response_body();
  inline void clear_has_response_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* request_url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> request_headers_;
  ::std::string* request_body_;
  ::std::string* response_time_;
  ::std::string* response_status_;
  ::google::protobuf::RepeatedPtrField< ::std::string> response_headers_;
  ::std::string* response_body_;
  bool response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_url_5frequest_2eproto();
  friend void protobuf_AssignDesc_url_5frequest_2eproto();
  friend void protobuf_ShutdownFile_url_5frequest_2eproto();

  void InitAsDefaultInstance();
  static URLRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// URLRequest

// optional string request_url = 1;
inline bool URLRequest::has_request_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void URLRequest::set_has_request_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void URLRequest::clear_has_request_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void URLRequest::clear_request_url() {
  if (request_url_ != &::google::protobuf::internal::kEmptyString) {
    request_url_->clear();
  }
  clear_has_request_url();
}
inline const ::std::string& URLRequest::request_url() const {
  return *request_url_;
}
inline void URLRequest::set_request_url(const ::std::string& value) {
  set_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    request_url_ = new ::std::string;
  }
  request_url_->assign(value);
}
inline void URLRequest::set_request_url(const char* value) {
  set_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    request_url_ = new ::std::string;
  }
  request_url_->assign(value);
}
inline void URLRequest::set_request_url(const char* value, size_t size) {
  set_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    request_url_ = new ::std::string;
  }
  request_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* URLRequest::mutable_request_url() {
  set_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    request_url_ = new ::std::string;
  }
  return request_url_;
}
inline ::std::string* URLRequest::release_request_url() {
  clear_has_request_url();
  if (request_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_url_;
    request_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void URLRequest::set_allocated_request_url(::std::string* request_url) {
  if (request_url_ != &::google::protobuf::internal::kEmptyString) {
    delete request_url_;
  }
  if (request_url) {
    set_has_request_url();
    request_url_ = request_url;
  } else {
    clear_has_request_url();
    request_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string request_headers = 2;
inline int URLRequest::request_headers_size() const {
  return request_headers_.size();
}
inline void URLRequest::clear_request_headers() {
  request_headers_.Clear();
}
inline const ::std::string& URLRequest::request_headers(int index) const {
  return request_headers_.Get(index);
}
inline ::std::string* URLRequest::mutable_request_headers(int index) {
  return request_headers_.Mutable(index);
}
inline void URLRequest::set_request_headers(int index, const ::std::string& value) {
  request_headers_.Mutable(index)->assign(value);
}
inline void URLRequest::set_request_headers(int index, const char* value) {
  request_headers_.Mutable(index)->assign(value);
}
inline void URLRequest::set_request_headers(int index, const char* value, size_t size) {
  request_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* URLRequest::add_request_headers() {
  return request_headers_.Add();
}
inline void URLRequest::add_request_headers(const ::std::string& value) {
  request_headers_.Add()->assign(value);
}
inline void URLRequest::add_request_headers(const char* value) {
  request_headers_.Add()->assign(value);
}
inline void URLRequest::add_request_headers(const char* value, size_t size) {
  request_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
URLRequest::request_headers() const {
  return request_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
URLRequest::mutable_request_headers() {
  return &request_headers_;
}

// optional string request_body = 3;
inline bool URLRequest::has_request_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void URLRequest::set_has_request_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void URLRequest::clear_has_request_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void URLRequest::clear_request_body() {
  if (request_body_ != &::google::protobuf::internal::kEmptyString) {
    request_body_->clear();
  }
  clear_has_request_body();
}
inline const ::std::string& URLRequest::request_body() const {
  return *request_body_;
}
inline void URLRequest::set_request_body(const ::std::string& value) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(value);
}
inline void URLRequest::set_request_body(const char* value) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(value);
}
inline void URLRequest::set_request_body(const char* value, size_t size) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* URLRequest::mutable_request_body() {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  return request_body_;
}
inline ::std::string* URLRequest::release_request_body() {
  clear_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_body_;
    request_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void URLRequest::set_allocated_request_body(::std::string* request_body) {
  if (request_body_ != &::google::protobuf::internal::kEmptyString) {
    delete request_body_;
  }
  if (request_body) {
    set_has_request_body();
    request_body_ = request_body;
  } else {
    clear_has_request_body();
    request_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool response = 4;
inline bool URLRequest::has_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void URLRequest::set_has_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void URLRequest::clear_has_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void URLRequest::clear_response() {
  response_ = false;
  clear_has_response();
}
inline bool URLRequest::response() const {
  return response_;
}
inline void URLRequest::set_response(bool value) {
  set_has_response();
  response_ = value;
}

// optional string response_time = 5;
inline bool URLRequest::has_response_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void URLRequest::set_has_response_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void URLRequest::clear_has_response_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void URLRequest::clear_response_time() {
  if (response_time_ != &::google::protobuf::internal::kEmptyString) {
    response_time_->clear();
  }
  clear_has_response_time();
}
inline const ::std::string& URLRequest::response_time() const {
  return *response_time_;
}
inline void URLRequest::set_response_time(const ::std::string& value) {
  set_has_response_time();
  if (response_time_ == &::google::protobuf::internal::kEmptyString) {
    response_time_ = new ::std::string;
  }
  response_time_->assign(value);
}
inline void URLRequest::set_response_time(const char* value) {
  set_has_response_time();
  if (response_time_ == &::google::protobuf::internal::kEmptyString) {
    response_time_ = new ::std::string;
  }
  response_time_->assign(value);
}
inline void URLRequest::set_response_time(const char* value, size_t size) {
  set_has_response_time();
  if (response_time_ == &::google::protobuf::internal::kEmptyString) {
    response_time_ = new ::std::string;
  }
  response_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* URLRequest::mutable_response_time() {
  set_has_response_time();
  if (response_time_ == &::google::protobuf::internal::kEmptyString) {
    response_time_ = new ::std::string;
  }
  return response_time_;
}
inline ::std::string* URLRequest::release_response_time() {
  clear_has_response_time();
  if (response_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_time_;
    response_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void URLRequest::set_allocated_response_time(::std::string* response_time) {
  if (response_time_ != &::google::protobuf::internal::kEmptyString) {
    delete response_time_;
  }
  if (response_time) {
    set_has_response_time();
    response_time_ = response_time;
  } else {
    clear_has_response_time();
    response_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string response_status = 6;
inline bool URLRequest::has_response_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void URLRequest::set_has_response_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void URLRequest::clear_has_response_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void URLRequest::clear_response_status() {
  if (response_status_ != &::google::protobuf::internal::kEmptyString) {
    response_status_->clear();
  }
  clear_has_response_status();
}
inline const ::std::string& URLRequest::response_status() const {
  return *response_status_;
}
inline void URLRequest::set_response_status(const ::std::string& value) {
  set_has_response_status();
  if (response_status_ == &::google::protobuf::internal::kEmptyString) {
    response_status_ = new ::std::string;
  }
  response_status_->assign(value);
}
inline void URLRequest::set_response_status(const char* value) {
  set_has_response_status();
  if (response_status_ == &::google::protobuf::internal::kEmptyString) {
    response_status_ = new ::std::string;
  }
  response_status_->assign(value);
}
inline void URLRequest::set_response_status(const char* value, size_t size) {
  set_has_response_status();
  if (response_status_ == &::google::protobuf::internal::kEmptyString) {
    response_status_ = new ::std::string;
  }
  response_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* URLRequest::mutable_response_status() {
  set_has_response_status();
  if (response_status_ == &::google::protobuf::internal::kEmptyString) {
    response_status_ = new ::std::string;
  }
  return response_status_;
}
inline ::std::string* URLRequest::release_response_status() {
  clear_has_response_status();
  if (response_status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_status_;
    response_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void URLRequest::set_allocated_response_status(::std::string* response_status) {
  if (response_status_ != &::google::protobuf::internal::kEmptyString) {
    delete response_status_;
  }
  if (response_status) {
    set_has_response_status();
    response_status_ = response_status;
  } else {
    clear_has_response_status();
    response_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string response_headers = 7;
inline int URLRequest::response_headers_size() const {
  return response_headers_.size();
}
inline void URLRequest::clear_response_headers() {
  response_headers_.Clear();
}
inline const ::std::string& URLRequest::response_headers(int index) const {
  return response_headers_.Get(index);
}
inline ::std::string* URLRequest::mutable_response_headers(int index) {
  return response_headers_.Mutable(index);
}
inline void URLRequest::set_response_headers(int index, const ::std::string& value) {
  response_headers_.Mutable(index)->assign(value);
}
inline void URLRequest::set_response_headers(int index, const char* value) {
  response_headers_.Mutable(index)->assign(value);
}
inline void URLRequest::set_response_headers(int index, const char* value, size_t size) {
  response_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* URLRequest::add_response_headers() {
  return response_headers_.Add();
}
inline void URLRequest::add_response_headers(const ::std::string& value) {
  response_headers_.Add()->assign(value);
}
inline void URLRequest::add_response_headers(const char* value) {
  response_headers_.Add()->assign(value);
}
inline void URLRequest::add_response_headers(const char* value, size_t size) {
  response_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
URLRequest::response_headers() const {
  return response_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
URLRequest::mutable_response_headers() {
  return &response_headers_;
}

// optional string response_body = 8;
inline bool URLRequest::has_response_body() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void URLRequest::set_has_response_body() {
  _has_bits_[0] |= 0x00000080u;
}
inline void URLRequest::clear_has_response_body() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void URLRequest::clear_response_body() {
  if (response_body_ != &::google::protobuf::internal::kEmptyString) {
    response_body_->clear();
  }
  clear_has_response_body();
}
inline const ::std::string& URLRequest::response_body() const {
  return *response_body_;
}
inline void URLRequest::set_response_body(const ::std::string& value) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(value);
}
inline void URLRequest::set_response_body(const char* value) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(value);
}
inline void URLRequest::set_response_body(const char* value, size_t size) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* URLRequest::mutable_response_body() {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  return response_body_;
}
inline ::std::string* URLRequest::release_response_body() {
  clear_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_body_;
    response_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void URLRequest::set_allocated_response_body(::std::string* response_body) {
  if (response_body_ != &::google::protobuf::internal::kEmptyString) {
    delete response_body_;
  }
  if (response_body) {
    set_has_response_body();
    response_body_ = response_body;
  } else {
    clear_has_response_body();
    response_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_url_5frequest_2eproto__INCLUDED
